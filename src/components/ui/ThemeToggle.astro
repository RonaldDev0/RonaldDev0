---
// Props: { showText?: boolean, class?: string, id?: string }
const { showText = false, class: className = '', id = 'theme-toggle' } = Astro.props
---
{showText ? (
  <button
    id={id}
    aria-label='Toggle dark mode'
    type='button'
    class={`w-full px-3 py-2 text-base font-medium text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors duration-200 flex items-center gap-2 ${className}`}
  >
    <span id={`${id}-icon`} class='block'></span>
    <span class='text-base font-medium select-none'>Theme</span>
  </button>
) : (
  <button
    id={id}
    aria-label='Toggle dark mode'
    class={`p-2 rounded-full border border-border bg-background hover:bg-accent transition-colors duration-200 flex items-center justify-center focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 cursor-pointer ${className}`}
    type='button'
  >
    <span id={`${id}-icon`} class='block'></span>
  </button>
)}

<script>
  // @ts-nocheck
  function setThemeIcon(isDark, el) {
    if (!el) return;
    el.innerHTML = isDark
      ? `<svg class='w-5 h-5 text-yellow-400' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 3v1m0 16v1m8.66-13.66l-.71.71M4.05 19.07l-.71.71M21 12h-1M4 12H3m16.66 5.66l-.71-.71M4.05 4.93l-.71-.71M16 12a4 4 0 11-8 0 4 4 0 018 0z'/></svg>`
      : `<svg class='w-5 h-5 text-blue-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M21 12.79A9 9 0 1111.21 3a7 7 0 109.79 9.79z'/></svg>`
  }

  function applyTheme(dark) {
    const html = document.documentElement
    if (dark) {
      html.classList.add('dark')
    } else {
      html.classList.remove('dark')
    }
    // Update all toggles
    setThemeIcon(dark, document.getElementById('theme-toggle-desktop-icon'))
    setThemeIcon(dark, document.getElementById('theme-toggle-mobile-icon'))
  }

  function getSystemPrefersDark() {
    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
  }

  function getStoredTheme() {
    return localStorage.getItem('theme')
  }

  function setStoredTheme(theme) {
    localStorage.setItem('theme', theme)
  }

  function initThemeToggles() {
    let dark = false
    const stored = getStoredTheme()
    if (stored === 'dark') dark = true
    else if (stored === 'light') dark = false;
    else dark = getSystemPrefersDark()
    applyTheme(dark)
    // Assign events to both toggles if they exist
    const desktopToggle = document.getElementById('theme-toggle-desktop')
    const mobileToggle = document.getElementById('theme-toggle-mobile')
    if (desktopToggle) {
      desktopToggle.onclick = () => {
        const isDark = !document.documentElement.classList.contains('dark')
        applyTheme(isDark);
        setStoredTheme(isDark ? 'dark' : 'light')
      };
    }
    if (mobileToggle) {
      mobileToggle.onclick = () => {
        const isDark = !document.documentElement.classList.contains('dark')
        applyTheme(isDark)
        setStoredTheme(isDark ? 'dark' : 'light')
      };
    }
  }

  // Re-initialize toggles every time mobile menu is opened
  document.addEventListener('DOMContentLoaded', () => {
    initThemeToggles();
    // If there's a mobile menu, re-initialize when it's shown
    const mobileMenuButton = document.getElementById('mobile-menu-button')
    if (mobileMenuButton) {
      mobileMenuButton.addEventListener('click', () => {
        setTimeout(initThemeToggles, 10)
      })
    }
  })
</script> 